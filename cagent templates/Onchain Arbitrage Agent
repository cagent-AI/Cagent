from web3 import Web3
import json

# Configuration
INFURA_URL = "https://mainnet.infura.io/v3/YOUR_INFURA_PROJECT_ID"
PRIVATE_KEY = "YOUR_PRIVATE_KEY"
ARBITRATION_CONTRACT_ADDRESS = "0xYourContractAddress"
ABI_PATH = "contract_abi.json"

# Connect to the Ethereum network
web3 = Web3(Web3.HTTPProvider(INFURA_URL))
if not web3.isConnected():
    raise Exception("Unable to connect to the Ethereum network")

# Load contract ABI
with open(ABI_PATH, "r") as abi_file:
    contract_abi = json.load(abi_file)

# Initialize contract
contract = web3.eth.contract(address=ARBITRATION_CONTRACT_ADDRESS, abi=contract_abi)

# Load wallet
account = web3.eth.account.from_key(PRIVATE_KEY)
account_address = account.address

# Arbitration logic
def evaluate_dispute(dispute_data):
    """
    Custom logic to evaluate a dispute.
    :param dispute_data: Data about the dispute (dictionary format).
    :return: Decision outcome (e.g., True or False).
    """
    # Example: Approve the claimant if the claim amount is below a threshold
    claim_amount = dispute_data.get("claimAmount", 0)
    threshold = 100  # Example threshold in ETH
    return claim_amount <= threshold

# Listen for dispute events
def handle_event(event):
    """Handles dispute events and submits a decision."""
    try:
        dispute_id = event["args"]["disputeId"]
        dispute_data = contract.functions.getDispute(dispute_id).call()

        print(f"Dispute {dispute_id} received. Evaluating...")
        decision = evaluate_dispute(dispute_data)

        print(f"Submitting decision for dispute {dispute_id}: {decision}")
        submit_decision(dispute_id, decision)

    except Exception as e:
        print(f"Error handling event: {e}")

# Submit decision
def submit_decision(dispute_id, decision):
    """Submits the arbitration decision to the smart contract."""
    try:
        txn = contract.functions.submitDecision(dispute_id, decision).buildTransaction({
            'chainId': 1,  # Mainnet chain ID
            'gas': 300000,
            'gasPrice': web3.toWei('50', 'gwei'),
            'nonce': web3.eth.getTransactionCount(account_address),
        })

        # Sign and send the transaction
        signed_txn = web3.eth.account.sign_transaction(txn, private_key=PRIVATE_KEY)
        txn_hash = web3.eth.send_raw_transaction(signed_txn.rawTransaction)
        print(f"Decision submitted. Transaction hash: {txn_hash.hex()}")

    except Exception as e:
        print(f"Error submitting decision: {e}")

# Event loop to listen for new disputes
def main():
    print("Starting arbitration agent...")
    event_filter = contract.events.DisputeCreated.createFilter(fromBlock='latest')

    while True:
        try:
            for event in event_filter.get_new_entries():
                handle_event(event)
        except Exception as e:
            print(f"Error in event loop: {e}")

if __name__ == "__main__":
    main()
